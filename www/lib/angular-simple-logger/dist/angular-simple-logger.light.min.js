!function(n,r){r.module("nemLogging",[]),r.module("nemLogging").provider("nemDebug",function(){var n=null;return this.$get=function(){return n},this.debug=n,this});var t=function(n,r){return function(){return n.apply(r,arguments)}};r.module("nemLogging").provider("nemSimpleLogger",["nemDebugProvider",function(n){var r,i,e,o,u,g,f,s,l;s=n.debug,e=["debug","info","warn","error","log"],r={};for(f in e)l=e[f],r[l]=f;return u=function(n,r,t){return n>=r?t():void 0},o=function(n){var r;if(r=!1,!n)return r;for(f in e)if(l=e[f],r=null!=n[l]&&"function"==typeof n[l],!r)break;return r},g=function(n,r){var t,i;t=s(n),i={};for(f in e)l=e[f],i[l]="debug"===l?t:r[l];return i},i=function(){function n(n){var i;if(this.$log=n,this.spawn=t(this.spawn,this),!this.$log)throw"internalLogger undefined";if(!o(this.$log))throw"@$log is invalid";this.doLog=!0,i={},e.forEach(function(n){return function(t){return i[t]=function(i){return n.doLog?u(r[t],n.currentLevel,function(){return n.$log[t](i)}):void 0},n[t]=i[t]}}(this)),this.LEVELS=r,this.currentLevel=r.error}return n.prototype.spawn=function(r){if("string"==typeof r){if(!o(this.$log))throw"@$log is invalid";if(!s)throw"nemDebug is undefined this is probably the light version of this library sep debug logggers is not supported!";return g(r,this.$log)}return new n(r||this.$log)},n}(),this.decorator=["$log",function(n){var t;return t=new i(n),t.currentLevel=r.debug,t}],this.$get=["$log",function(n){return new i(n)}],this}])}(window,angular);